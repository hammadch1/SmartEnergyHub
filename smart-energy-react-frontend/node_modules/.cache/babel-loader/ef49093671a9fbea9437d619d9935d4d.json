{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js\";\nimport React from \"react\";\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\";\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\";\n// for data visualization\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"http://localhost:5001/api/readings\"; // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([]);\n\n  // makes the GET request to API Route in our backend & updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(API_URL);\n      console.log(\"Fetched Data:\", response.data); // Debug log\n\n      if (Array.isArray(response.data)) {\n        setEnergyData(response.data);\n      } else {\n        console.error(\"Invalid API response format:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error);\n    }\n  };\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  });\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const chartData = energyData.length > 0 ? {\n    labels: energyData.map(entry => new Date(entry.timestamp).toLocaleTimeString()),\n    datasets: [{\n      label: \"HVAC Floor 1\",\n      data: energyData.filter(entry => entry.sensor === \"hvac/floor1\").map(entry => entry.value),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.2)\"\n    }, {\n      label: \"HVAC Floor 2\",\n      data: energyData.filter(entry => entry.sensor === \"hvac/floor2\").map(entry => entry.value),\n      borderColor: \"rgb(54, 162, 235)\",\n      backgroundColor: \"rgba(54, 162, 235, 0.2)\"\n    }, {\n      label: \"Lighting Floor 1\",\n      data: energyData.filter(entry => entry.sensor === \"lighting/floor1\").map(entry => entry.value),\n      borderColor: \"rgb(255, 206, 86)\",\n      backgroundColor: \"rgba(255, 206, 86, 0.2)\"\n    }, {\n      label: \"Lighting Floor 2\",\n      data: energyData.filter(entry => entry.sensor === \"lighting/floor2\").map(entry => entry.value),\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\"\n    }]\n  } : {\n    labels: [],\n    datasets: []\n  }; // Fix: Prevent empty dataset errors\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    img: \"\\uD83D\\uDCCA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), \" Smart Energy Dashboard\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","axios","Line","API_URL","App","energyData","setEnergyData","fetchData","response","get","console","log","data","Array","isArray","error","interval","setInterval","clearInterval","chartData","length","labels","map","entry","Date","timestamp","toLocaleTimeString","datasets","label","filter","sensor","value","borderColor","backgroundColor","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","img"],"sources":["/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js"],"sourcesContent":["import React from \"react\"\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\"\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\"\n// for data visualization\nimport { Line } from \"react-chartjs-2\"\nimport \"chart.js/auto\"\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"http://localhost:5001/api/readings\" // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([])\n\n  // makes the GET request to API Route in our backend & updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(API_URL)\n\n      console.log(\"Fetched Data:\", response.data) // Debug log\n\n      if (Array.isArray(response.data)) {\n        setEnergyData(response.data)\n      } else {\n        console.error(\"Invalid API response format:\", response.data)\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error)\n    }\n  }\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData()\n    const interval = setInterval(fetchData, 5000) // refresh every 5s\n    return () => clearInterval(interval)\n  })\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const chartData =\n    energyData.length > 0\n      ? {\n          labels: energyData.map((entry) =>\n            new Date(entry.timestamp).toLocaleTimeString()\n          ),\n          datasets: [\n            {\n              label: \"HVAC Floor 1\",\n              data: energyData\n                .filter((entry) => entry.sensor === \"hvac/floor1\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(255, 99, 132)\",\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n            },\n            {\n              label: \"HVAC Floor 2\",\n              data: energyData\n                .filter((entry) => entry.sensor === \"hvac/floor2\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(54, 162, 235)\",\n              backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n            },\n            {\n              label: \"Lighting Floor 1\",\n              data: energyData\n                .filter((entry) => entry.sensor === \"lighting/floor1\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(255, 206, 86)\",\n              backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n            },\n            {\n              label: \"Lighting Floor 2\",\n              data: energyData\n                .filter((entry) => entry.sensor === \"lighting/floor2\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(75, 192, 192)\",\n              backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n            },\n          ],\n        }\n      : { labels: [], datasets: [] } // Fix: Prevent empty dataset errors\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>\n        <span img=\"ðŸ“Š\" /> Smart Energy Dashboard\n      </h1>\n      <Line data={chartData} />\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}