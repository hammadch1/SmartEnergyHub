{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js\";\nimport React from \"react\";\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\";\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\";\n// for data visualization\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"http://localhost:5001/api/readings\"; // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([]);\n\n  // makes the GET request to API Route in our backend & updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(`${API_URL}?t=${new Date().getTime()}`);\n      console.log(\"Fetched Data:\", response.data); // Debug log\n\n      if (Array.isArray(response.data)) {\n        setEnergyData(response.data);\n      } else {\n        console.error(\"Invalid API response format:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error);\n    }\n  };\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  });\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const sortedData = [...energyData].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n  const chartData = energyData.length > 0 ? {\n    labels: sortedData.map(entry => new Date(entry.timestamp).toLocaleTimeString()),\n    datasets: [{\n      label: \"HVAC Floor 1\",\n      data: sortedData.filter(entry => entry.sensor === \"hvac/floor1\").map(entry => entry.value),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n      borderWidth: 3,\n      // Ensure thick lines\n      pointRadius: 5 // Ensure points are visible\n    }, {\n      label: \"HVAC Floor 2\",\n      data: sortedData.filter(entry => entry.sensor === \"hvac/floor2\").map(entry => entry.value),\n      borderColor: \"rgb(54, 162, 235)\",\n      backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n      borderWidth: 3,\n      pointRadius: 5\n    }, {\n      label: \"Lighting Floor 1\",\n      data: sortedData.filter(entry => entry.sensor === \"lighting/floor1\").map(entry => entry.value),\n      borderColor: \"rgb(255, 206, 86)\",\n      backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n      borderWidth: 3,\n      pointRadius: 5\n    }, {\n      label: \"Lighting Floor 2\",\n      data: sortedData.filter(entry => entry.sensor === \"lighting/floor2\").map(entry => entry.value),\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n      borderWidth: 3,\n      pointRadius: 5\n    }]\n  } : {\n    labels: [],\n    datasets: []\n  }; // Fix: Prevent empty dataset errors\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // Allow flexible resizing\n    scales: {\n      x: {\n        type: \"time\",\n        // ✅ Ensures proper time scale distribution\n        time: {\n          unit: \"second\",\n          // ✅ Ensures X-axis labels are evenly spaced\n          displayFormats: {\n            second: \"HH:mm:ss\" // ✅ Format time labels properly\n          }\n        },\n        ticks: {\n          autoSkip: false,\n          // ✅ Forces even spacing\n          maxTicksLimit: 10 // ✅ Shows at most 10 timestamps to fit well\n        }\n      },\n      y: {\n        beginAtZero: false // Keeps the values relative to min/max of dataset\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    img: \"\\uD83D\\uDCCA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), \" Smart Energy Dashboard\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      // Keeps chart properly visible on screen\n      elements: {\n        line: {\n          tension: 0.2,\n          // Smoothens the lines slightly\n          borderWidth: 3 // Thicker lines for better visibility\n        },\n        point: {\n          radius: 5 // Larger points for clarity\n        }\n      },\n      scales: {\n        x: {\n          ticks: {\n            autoSkip: true,\n            // Prevents timestamp overlap\n            maxTicksLimit: 8 // Limits the number of timestamps shown\n          }\n        },\n        y: {\n          beginAtZero: false // Keeps the values relative to min/max of dataset\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })));\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","axios","Line","API_URL","App","energyData","setEnergyData","fetchData","response","get","Date","getTime","console","log","data","Array","isArray","error","interval","setInterval","clearInterval","sortedData","sort","a","b","timestamp","chartData","length","labels","map","entry","toLocaleTimeString","datasets","label","filter","sensor","value","borderColor","backgroundColor","borderWidth","pointRadius","chartOptions","responsive","maintainAspectRatio","scales","x","type","time","unit","displayFormats","second","ticks","autoSkip","maxTicksLimit","y","beginAtZero","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","img","width","height","options","elements","line","tension","point","radius"],"sources":["/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js"],"sourcesContent":["import React from \"react\"\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\"\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\"\n// for data visualization\nimport { Line } from \"react-chartjs-2\"\nimport \"chart.js/auto\"\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"http://localhost:5001/api/readings\" // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([])\n\n  // makes the GET request to API Route in our backend & updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(`${API_URL}?t=${new Date().getTime()}`)\n\n      console.log(\"Fetched Data:\", response.data) // Debug log\n\n      if (Array.isArray(response.data)) {\n        setEnergyData(response.data)\n      } else {\n        console.error(\"Invalid API response format:\", response.data)\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error)\n    }\n  }\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData()\n    const interval = setInterval(fetchData, 5000) // refresh every 5s\n    return () => clearInterval(interval)\n  })\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const sortedData = [...energyData].sort(\n    (a, b) => new Date(a.timestamp) - new Date(b.timestamp)\n  )\n  const chartData =\n    energyData.length > 0\n      ? {\n          labels: sortedData.map((entry) =>\n            new Date(entry.timestamp).toLocaleTimeString()\n          ),\n          datasets: [\n            {\n              label: \"HVAC Floor 1\",\n              data: sortedData\n                .filter((entry) => entry.sensor === \"hvac/floor1\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(255, 99, 132)\",\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              borderWidth: 3, // Ensure thick lines\n              pointRadius: 5, // Ensure points are visible\n            },\n            {\n              label: \"HVAC Floor 2\",\n              data: sortedData\n                .filter((entry) => entry.sensor === \"hvac/floor2\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(54, 162, 235)\",\n              backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              borderWidth: 3,\n              pointRadius: 5,\n            },\n            {\n              label: \"Lighting Floor 1\",\n              data: sortedData\n                .filter((entry) => entry.sensor === \"lighting/floor1\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(255, 206, 86)\",\n              backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n              borderWidth: 3,\n              pointRadius: 5,\n            },\n            {\n              label: \"Lighting Floor 2\",\n              data: sortedData\n                .filter((entry) => entry.sensor === \"lighting/floor2\")\n                .map((entry) => entry.value),\n              borderColor: \"rgb(75, 192, 192)\",\n              backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              borderWidth: 3,\n              pointRadius: 5,\n            },\n          ],\n        }\n      : { labels: [], datasets: [] } // Fix: Prevent empty dataset errors\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false, // Allow flexible resizing\n    scales: {\n      x: {\n        type: \"time\", // ✅ Ensures proper time scale distribution\n        time: {\n          unit: \"second\", // ✅ Ensures X-axis labels are evenly spaced\n          displayFormats: {\n            second: \"HH:mm:ss\", // ✅ Format time labels properly\n          },\n        },\n        ticks: {\n          autoSkip: false, // ✅ Forces even spacing\n          maxTicksLimit: 10, // ✅ Shows at most 10 timestamps to fit well\n        },\n      },\n      y: {\n        beginAtZero: false, // Keeps the values relative to min/max of dataset\n      },\n    },\n  }\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>\n        <span img=\"📊\" /> Smart Energy Dashboard\n      </h1>\n      <div style={{ width: \"100%\", height: \"500px\" }}>\n        <Line\n          data={chartData}\n          options={{\n            responsive: true,\n            maintainAspectRatio: true, // Keeps chart properly visible on screen\n            elements: {\n              line: {\n                tension: 0.2, // Smoothens the lines slightly\n                borderWidth: 3, // Thicker lines for better visibility\n              },\n              point: {\n                radius: 5, // Larger points for clarity\n              },\n            },\n            scales: {\n              x: {\n                ticks: {\n                  autoSkip: true, // Prevents timestamp overlap\n                  maxTicksLimit: 8, // Limits the number of timestamps shown\n                },\n              },\n              y: {\n                beginAtZero: false, // Keeps the values relative to min/max of dataset\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}