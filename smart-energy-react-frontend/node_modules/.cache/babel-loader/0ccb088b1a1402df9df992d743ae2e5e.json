{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js\";\nimport React from \"react\";\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\";\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\";\n// for data visualization\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"https://localhost:5001/api/readings\"; // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([]);\n\n  // makes the GET request to API Route in our backendand updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios(API_URL);\n      if (Array.isArray(response.data)) {\n        setEnergyData(response.data);\n      } else {\n        console.error(\"Invalid API response format:\", error);\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error);\n    }\n  };\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  });\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const chartData = {\n    labels: energyData.map(energy => new Date(energy.timestamp).toLocaleTimeString()),\n    datasets: {\n      label: \"Energy Consumption (W)\",\n      data: energyData.map(energy => energy.value),\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\"\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    img: \"\\uD83D\\uDCCA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), \" Smart Energy Dashboard\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","axios","Line","API_URL","App","energyData","setEnergyData","fetchData","response","Array","isArray","data","console","error","interval","setInterval","clearInterval","chartData","labels","map","energy","Date","timestamp","toLocaleTimeString","datasets","label","value","borderColor","backgroundColor","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","img"],"sources":["/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js"],"sourcesContent":["import React from \"react\"\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\"\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\"\n// for data visualization\nimport { Line } from \"react-chartjs-2\"\nimport \"chart.js/auto\"\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"https://localhost:5001/api/readings\" // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([])\n\n  // makes the GET request to API Route in our backendand updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios(API_URL)\n      if (Array.isArray(response.data)){\n        setEnergyData(response.data)\n      }\n      else{\n        console.error(\"Invalid API response format:\", error)\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error)\n    }\n  }\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData()\n    const interval = setInterval(fetchData, 5000) // refresh every 5s\n    return () => clearInterval(interval)\n  })\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const chartData = {\n    labels: energyData.map((energy) =>\n      new Date(energy.timestamp).toLocaleTimeString()\n    ),\n    datasets: {\n      label: \"Energy Consumption (W)\",\n      data: energyData.map((energy) => energy.value),\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n    },\n  }\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>\n        <span img=\"ðŸ“Š\" /> Smart Energy Dashboard\n      </h1>\n      <Line data={chartData} />\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,eAAe;;AAEtB;AACA,MAAMC,OAAO,GAAG,qCAAqC,EAAC;;AAEtD,SAASC,GAAGA,CAAA,EAAG;EACb;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACE,OAAO,CAAC;MACrC,IAAIM,KAAK,CAACC,OAAO,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAC;QAC/BL,aAAa,CAACE,QAAQ,CAACG,IAAI,CAAC;MAC9B,CAAC,MACG;QACFC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EACD;EACAd,SAAS,CAAC,MAAM;IACdQ,SAAS,CAAC,CAAC;IACX,MAAMO,QAAQ,GAAGC,WAAW,CAACR,SAAS,EAAE,IAAI,CAAC,EAAC;IAC9C,OAAO,MAAMS,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,CAAC;;EAEF;EACA,MAAMG,SAAS,GAAG;IAChBC,MAAM,EAAEb,UAAU,CAACc,GAAG,CAAEC,MAAM,IAC5B,IAAIC,IAAI,CAACD,MAAM,CAACE,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAChD,CAAC;IACDC,QAAQ,EAAE;MACRC,KAAK,EAAE,wBAAwB;MAC/Bd,IAAI,EAAEN,UAAU,CAACc,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACM,KAAK,CAAC;MAC9CC,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACnB;EACF,CAAC;EAED,oBACE9B,KAAA,CAAA+B,aAAA;IAAKC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnDxC,KAAA,CAAA+B,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACExC,KAAA,CAAA+B,aAAA;IAAMU,GAAG,EAAC,cAAI;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,2BACf,CAAC,eACLxC,KAAA,CAAA+B,aAAA,CAAC3B,IAAI;IAACS,IAAI,EAAEM,SAAU;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACrB,CAAC;AAEV;AAEA,eAAelC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}