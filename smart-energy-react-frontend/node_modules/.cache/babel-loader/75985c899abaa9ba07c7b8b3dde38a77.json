{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js\";\nimport React from \"react\";\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\";\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\";\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"https://localhost:5001/api/readings\"; // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([]);\n\n  // makes the GET request to API Route in our backendand updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios(API_URL);\n      setEnergyData(response.data);\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error);\n    }\n  };\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  });\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const chartData = {\n    labels: energyData.map(energy => new Date(energy.timestamp).toLocaleTimeString()),\n    datasets: {\n      label: \"Energy Consumption (W)\",\n      data: energyData.map(energy => energy.value),\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\"\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  });\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","axios","API_URL","App","energyData","setEnergyData","fetchData","response","data","error","console","interval","setInterval","clearInterval","chartData","labels","map","energy","Date","timestamp","toLocaleTimeString","datasets","label","value","borderColor","backgroundColor","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/muhammadhammadchaudhary/Desktop/SmartEnergyHub/smart-energy-dashboard/src/App.js"],"sourcesContent":["import React from \"react\"\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\"\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\"\n\n// stores the API endpoint so we can fetch sensor data\nconst API_URL = \"https://localhost:5001/api/readings\" // BACKEND API URL\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([])\n\n  // makes the GET request to API Route in our backendand updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios(API_URL)\n      setEnergyData(response.data)\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error)\n    }\n  }\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData()\n    const interval = setInterval(fetchData, 5000) // refresh every 5s\n    return () => clearInterval(interval)\n  })\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const chartData = {\n    labels: energyData.map((energy) =>\n      new Date(energy.timestamp).toLocaleTimeString()\n    ),\n    datasets: {\n      label: \"Energy Consumption (W)\",\n      data: energyData.map((energy) => energy.value),\n      borderColor: \"rgb(75, 192, 192)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n    },\n  }\n\n  return (<div >\n\n  </div>)\n}\n\nexport default App\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,qCAAqC,EAAC;;AAEtD,SAASC,GAAGA,CAAA,EAAG;EACb;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMM,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACC,OAAO,CAAC;MACrCG,aAAa,CAACE,QAAQ,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EACD;EACAV,SAAS,CAAC,MAAM;IACdO,SAAS,CAAC,CAAC;IACX,MAAMK,QAAQ,GAAGC,WAAW,CAACN,SAAS,EAAE,IAAI,CAAC,EAAC;IAC9C,OAAO,MAAMO,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,CAAC;;EAEF;EACA,MAAMG,SAAS,GAAG;IAChBC,MAAM,EAAEX,UAAU,CAACY,GAAG,CAAEC,MAAM,IAC5B,IAAIC,IAAI,CAACD,MAAM,CAACE,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAChD,CAAC;IACDC,QAAQ,EAAE;MACRC,KAAK,EAAE,wBAAwB;MAC/Bd,IAAI,EAAEJ,UAAU,CAACY,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACM,KAAK,CAAC;MAC9CC,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACnB;EACF,CAAC;EAED,oBAAQ3B,KAAA,CAAA4B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAEH,CAAC;AACR;AAEA,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}