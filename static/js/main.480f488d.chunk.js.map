{"version":3,"sources":["config.js","App.js","index.js"],"names":["config","API_URL","App","energyData","setEnergyData","useState","fetchData","async","response","axios","get","console","log","data","Array","isArray","error","useEffect","interval","setInterval","clearInterval","sortedData","sort","a","b","Date","timestamp","uniqueTimestamps","Set","map","entry","getSensorData","sensorName","find","e","sensor","value","chartData","length","labels","toLocaleTimeString","hour","minute","second","datasets","label","spanGaps","borderColor","backgroundColor","borderWidth","pointRadius","React","createElement","style","textAlign","padding","img","width","height","Line","options","responsive","maintainAspectRatio","elements","line","tension","point","radius","scales","x","ticks","autoSkip","maxTicksLimit","y","beginAtZero","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+LAIeA,MAJA,CACbC,QAAS,0DCkJIC,MAvIf,WAEE,MAAOC,EAAYC,GAAiBC,mBAAS,IAGvCC,EAAYC,UAChB,IACE,MAAMC,QAAiBC,IAAMC,IAAIV,EAAOC,SAExCU,QAAQC,IAAI,gBAAiBJ,EAASK,MAElCC,MAAMC,QAAQP,EAASK,MACzBT,EAAcI,EAASK,MAEvBF,QAAQK,MAAM,+BAAgCR,EAASK,MAEzD,MAAOG,GACPL,QAAQK,MAAM,+BAAgCA,KAIlDC,oBAAU,KACRX,IAEA,MAAMY,EAAWC,YAAYb,EAAW,KAExC,MAAO,IAAMc,cAAcF,IAC1B,IAGH,MAAMG,EAAa,IAAIlB,GAAYmB,KACjC,CAACC,EAAGC,IAAM,IAAIC,KAAKF,EAAEG,WAAa,IAAID,KAAKD,EAAEE,YAGzCC,EAAmB,IACpB,IAAIC,IAAIP,EAAWQ,IAAKC,GAAUA,EAAMJ,aAGvCK,EAAiBC,GACrBL,EAAiBE,IAAKH,IACpB,MAAMI,EAAQT,EAAWY,KACtBC,GAAMA,EAAEC,SAAWH,GAAcE,EAAER,YAAcA,GAEpD,OAAOI,EAAQA,EAAMM,MAAQ,OAG3BC,EACJlC,EAAWmC,OAAS,EAChB,CACEC,OAAQZ,EAAiBE,IAAKH,GAC5B,IAAID,KAAKC,GAAWc,mBAAmB,GAAI,CACzCC,KAAM,UACNC,OAAQ,UACRC,OAAQ,aAGZC,SAAU,CACR,CACEC,MAAO,eACPhC,KAAMkB,EAAc,eACpBe,UAAU,EACVC,YAAa,oBACbC,gBAAiB,0BACjBC,YAAa,EACbC,YAAa,GAEf,CACEL,MAAO,eACPhC,KAAMkB,EAAc,eACpBe,UAAU,EACVC,YAAa,oBACbC,gBAAiB,0BACjBC,YAAa,EACbC,YAAa,GAEf,CACEL,MAAO,mBACPhC,KAAMkB,EAAc,mBACpBe,UAAU,EACVC,YAAa,oBACbC,gBAAiB,0BACjBC,YAAa,EACbC,YAAa,GAEf,CACEL,MAAO,mBACPhC,KAAMkB,EAAc,mBACpBe,UAAU,EACVC,YAAa,oBACbC,gBAAiB,0BACjBC,YAAa,EACbC,YAAa,KAInB,CAAEX,OAAQ,GAAIK,SAAU,IAE9B,OACEO,IAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,SAAUC,QAAS,SAC1CJ,IAAAC,cAAA,UACED,IAAAC,cAAA,QAAMI,IAAI,iBAAO,2BAEnBL,IAAAC,cAAA,OAAKC,MAAO,CAAEI,MAAO,OAAQC,OAAQ,UACnCP,IAAAC,cAACO,IAAI,CACH9C,KAAMwB,EACNuB,QAAS,CACPC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACRC,KAAM,CACJC,QAAS,GACThB,YAAa,GAEfiB,MAAO,CACLC,OAAQ,IAGZC,OAAQ,CACNC,EAAG,CACDC,MAAO,CACLC,UAAU,EACVC,cAAe,KAGnBC,EAAG,CACDC,aAAa,UCrIhBC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5B,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAAClD,EAAG","file":"static/js/main.480f488d.chunk.js","sourcesContent":["const config = {\n  API_URL: \"https://smart-energy-backend.onrender.com/api/readings\",\n}\n\nexport default config\n","import React from \"react\"\n// import react hooks (useEffect, useState) -> needed for data and auto-refreshing\nimport { useEffect, useState } from \"react\"\n// axios -> used to make HTTP requests to our backend\nimport axios from \"axios\"\n// for data visualization\nimport { Line } from \"react-chartjs-2\"\nimport \"chart.js/auto\"\nimport config from \"./config\"\n\n// stores the API endpoint so we can fetch sensor data\n\nfunction App() {\n  // creates energyData state -> holds sensor data, initially it's an empty array ([])\n  const [energyData, setEnergyData] = useState([])\n\n  // makes the GET request to API Route in our backend & updates the energy state with the response\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(config.API_URL)\n\n      console.log(\"Fetched Data:\", response.data) // Debug log\n\n      if (Array.isArray(response.data)) {\n        setEnergyData(response.data)\n      } else {\n        console.error(\"Invalid API response format:\", response.data)\n      }\n    } catch (error) {\n      console.error(\"Error fetching the response:\", error)\n    }\n  }\n  // calls fetch data once when the component loads & sets a data refresh interval of every 5 seconds\n  useEffect(() => {\n    fetchData()\n\n    const interval = setInterval(fetchData, 5000) // refresh every 5s\n\n    return () => clearInterval(interval)\n  }, [])\n\n  // prepare data for visualization, sets timetstamp on x-axis and energy values on y-axis and defines line chart style\n  const sortedData = [...energyData].sort(\n    (a, b) => new Date(a.timestamp) - new Date(b.timestamp)\n  )\n\n  const uniqueTimestamps = [\n    ...new Set(sortedData.map((entry) => entry.timestamp)),\n  ]\n\n  const getSensorData = (sensorName) =>\n    uniqueTimestamps.map((timestamp) => {\n      const entry = sortedData.find(\n        (e) => e.sensor === sensorName && e.timestamp === timestamp\n      )\n      return entry ? entry.value : null // Ensure null values instead of skipping\n    })\n\n  const chartData =\n    energyData.length > 0\n      ? {\n          labels: uniqueTimestamps.map((timestamp) =>\n            new Date(timestamp).toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              second: \"2-digit\",\n            })\n          ),\n          datasets: [\n            {\n              label: \"HVAC Floor 1\",\n              data: getSensorData(\"hvac/floor1\"),\n              spanGaps: true,\n              borderColor: \"rgb(255, 99, 132)\",\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              borderWidth: 3, // Ensure thick lines\n              pointRadius: 5, // Ensure points are visible\n            },\n            {\n              label: \"HVAC Floor 2\",\n              data: getSensorData(\"hvac/floor2\"),\n              spanGaps: true,\n              borderColor: \"rgb(54, 162, 235)\",\n              backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n              borderWidth: 3,\n              pointRadius: 5,\n            },\n            {\n              label: \"Lighting Floor 1\",\n              data: getSensorData(\"lighting/floor1\"),\n              spanGaps: true,\n              borderColor: \"rgb(255, 206, 86)\",\n              backgroundColor: \"rgba(255, 206, 86, 0.2)\",\n              borderWidth: 3,\n              pointRadius: 5,\n            },\n            {\n              label: \"Lighting Floor 2\",\n              data: getSensorData(\"lighting/floor2\"),\n              spanGaps: true,\n              borderColor: \"rgb(75, 192, 192)\",\n              backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              borderWidth: 3,\n              pointRadius: 5,\n            },\n          ],\n        }\n      : { labels: [], datasets: [] } // Fix: Prevent empty dataset errors\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>\n        <span img=\"ðŸ“Š\" /> Smart Energy Dashboard\n      </h1>\n      <div style={{ width: \"100%\", height: \"500px\" }}>\n        <Line\n          data={chartData}\n          options={{\n            responsive: true,\n            maintainAspectRatio: true, // Keeps chart properly visible on screen\n            elements: {\n              line: {\n                tension: 0.2, // Smoothens the lines slightly\n                borderWidth: 3, // Thicker lines for better visibility\n              },\n              point: {\n                radius: 5, // Larger points for clarity\n              },\n            },\n            scales: {\n              x: {\n                ticks: {\n                  autoSkip: true, // âœ… Forces even spacing\n                  maxTicksLimit: 10, // âœ… Shows at most 10 timestamps to fit well\n                },\n              },\n              y: {\n                beginAtZero: false, // Keeps the values relative to min/max of dataset\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport App from \"./App\"\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"))\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n"],"sourceRoot":""}